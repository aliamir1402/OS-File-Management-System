// C++ Code for Client Side:
#include<iostream>
#include<cstring>
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<unistd.h>
using namespace std;

// Defining Port Number and Buffer Size:

#define PORT 5000
#define BUFFER_SIZE 100

//Function to get command from the User:

void Get_User_Command(char text[])
{

    cout << ">> Enter Command: ";
    fgets(text, BUFFER_SIZE, stdin);
    text[strlen(text) - 1] = '\0'; //removing the extra line generated by fgets function
}

//Function for Sending Command to the Server:

void send_command(char command[], int socket)
{
    cout << ">> Sending Command...";
    write(socket, command, strlen(command));
    cout << "\n>> Command Sent!\n";
}

//Function for Getting and Displaying Results from the Server:

void read_result(int socket)
{

    char result[BUFFER_SIZE];
    int flag;

    cout << ">> Receiving Reply From Server...";
    cout << "\n>> Commands Result: ";

    read(socket, result, BUFFER_SIZE); // Getting Result
    cout << result; // Displaying Result

}

int main()
{
    char text[BUFFER_SIZE] = "";

    // Creating a TCP client Socket:

    int client = socket(AF_INET, SOCK_STREAM, 0);

    // Address and Port for the Socket:

    struct sockaddr_in address;
    address.sin_family = AF_INET;
    address.sin_port = htons(PORT); // Connects to Port Number 5000
    address.sin_addr.s_addr = INADDR_ANY; // Any IP address

    // Estabilishing Connecting with the Server:

    int connection = connect(client, (struct sockaddr*)&address, sizeof(address));

    // If Connection fails to estabilish

    if (connection == -1)
        cout << "Connection Failed!\n";

    // If Connection Estabilishes:

    else
    {
        cout << ">> Connection Estabilished with the Server!\n";

        while (1)
        {
            cout << "\n---------------Menu----------------\n 1.Create A File.\n 2.Create Directory.\n 3.Move File To Directory\n";
            cout << " 4.Open A File(For Read or Write).\n 5.Move Contents Within A File.\n 6.Delete A File.\n";
            cout << " 7.Trucate a File.\n 8.Write Memory Map To File.\n 9.Exit";
            cout << "\n---------------Menu----------------\n" << endl;


            // Getting Command from the User:

            Get_User_Command(text);

            if (strcmp(text, "Exit") == 0)
                break;

            // Sending Command to the Server:

            send_command(text, client);

            // Receiving Results From Server:

            read_result(client);
        }
    }

    // Closing Connection:

    close(client);

    return 0;
}
